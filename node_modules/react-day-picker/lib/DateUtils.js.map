{"version":3,"sources":["../src/DateUtils.js"],"names":[],"mappings":"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","file":"DateUtils.js","sourcesContent":["/**\n * Return `d` as a new date with `n` months added.\n * @param {[type]} d\n * @param {[type]} n\n */\nexport function addMonths(d, n) {\n  const newDate = clone(d);\n  newDate.setMonth(d.getMonth() + n);\n  return newDate;\n}\n\n/**\n * Clone a date object.\n *\n * @param  {Date} d The date to clone\n * @return {Date} The cloned date\n */\nexport function clone(d) {\n  return new Date(d.getTime());\n}\n\n/**\n * Return `true` if two dates are the same day, ignoring the time.\n *\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isSameDay(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n  return d1.getDate() === d2.getDate() &&\n    d1.getMonth() === d2.getMonth() &&\n    d1.getFullYear() === d2.getFullYear();\n}\n\n/**\n * Return `true` if a day is in the past, e.g. yesterday or any day\n * before yesterday.\n *\n * @param  {Date}  d\n * @return {Boolean}\n */\nexport function isPastDay(d) {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return d < today;\n}\n\n/**\n * Return `true` if day `d` is between days `d1` and `d2`,\n * without including them.\n *\n * @param  {Date}  d\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isDayBetween(d, d1, d2) {\n  d = clone(d);\n  d1 = clone(d1);\n  d2 = clone(d2);\n\n  d.setHours(0, 0, 0, 0);\n  d1.setHours(0, 0, 0, 0);\n  d2.setHours(0, 0, 0, 0);\n  return (d1 < d && d < d2) || (d2 < d && d < d1);\n}\n\n/**\n * Add a day to a range and return a new range. A range is an object with\n * `from` and `to` days.\n *\n * @param {Date} day\n * @param {Object} range\n * @return {Object} Returns a new range object\n */\nexport function addDayToRange(day, range={from: null, to: null}) {\n  let { from, to } = range;\n  if (!from) {\n    from = day;\n  }\n  else if (from && to && isSameDay(from, to) && isSameDay(day, from)) {\n    from = null;\n    to = null;\n  }\n  else if (to && day < from) {\n    from = day;\n  }\n  else if (to && isSameDay(day, to)) {\n    from = day;\n    to = day;\n  }\n  else {\n    to = day;\n    if (to < from) {\n      to = from;\n      from = day;\n    }\n  }\n\n  return { from, to };\n}\n\n/**\n * Return `true` if a day is included in a range of days.\n *\n * @param  {Date}  day\n * @param  {Object}  range\n * @return {Boolean}\n */\nexport function isDayInRange(day, range) {\n  const { from, to } = range;\n  return (from && isSameDay(day, from)) ||\n    (to && isSameDay(day, to)) ||\n    (from && to && isDayBetween(day, from, to));\n}\n\nexport default {\n  addDayToRange,\n  addMonths,\n  clone,\n  isSameDay,\n  isDayInRange,\n  isDayBetween,\n  isPastDay\n}\n"]}